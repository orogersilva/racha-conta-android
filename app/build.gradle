apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'
apply plugin: 'de.felixschulze.gradle.hockeyapp'
apply plugin: 'realm-android'

apply from: "${rootProject.getRootDir()}/config/quality/quality.gradle"
apply from: "${rootProject.getRootDir()}/jacoco.gradle"

// Versioning information
def versionMajor = 0
def versionMinor = 3
def versionPatch = 7

android {

    compileSdkVersion 24
    buildToolsVersion "28.0.3"

    defaultConfig {

        applicationId "com.orogersilva.rachaconta.taberna"
        minSdkVersion 15
        //targetSdkVersion 24
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch * 1
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        release {

            storeFile rootProject.file('rachaconta.jks')
            storePassword System.getenv("KEYSTORE_PASSWORD")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASSWORD")
        }
    }

    buildTypes {

        release {

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliasesFilePath="${rootProject.getRootDir()}/crashlytics/group_aliases.txt"
            ext.betaDistributionReleaseNotesFilePath="${rootProject.getRootDir()}/crashlytics/release_notes.txt"
        }
    }

    testBuildType obtainTestBuildType()

    play {

        serviceAccountEmail = System.getenv("SERVICE_ACCOUNT_EMAIL")
        pk12File = rootProject.file('play.p12')
        track = 'alpha'
    }

//    testOptions {
//        unitTests {
//            includeAndroidResources = true
//        }
//    }
}

hockeyapp {

    apiToken = System.getenv("HOCKEY_APP_API_TOKEN")
    notify = 1
    teams = 72599
}

// Show test status in console.
tasks.withType(Test) {

    testLogging {
        events "passed", "failed"
    }
}

def obtainTestBuildType() {

    def result = "debug"

    if (project.hasProperty("testBuildType")) {
        result = project.getProperties().get("testBuildType")
    }

    return result
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:24.0.0'
    implementation 'com.android.support:design:24.0.0'
    implementation 'com.android.support:recyclerview-v7:24.0.0'

    implementation('com.crashlytics.sdk.android:crashlytics:2.6.0@aar') {
        transitive = true;
    }

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation "org.robolectric:robolectric:3.1.4"
   //testImplementation "org.robolectric:robolectric:4.3"


    androidTestImplementation 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestImplementation 'com.android.support.test:runner:0.5'
    androidTestImplementation 'com.android.support:support-annotations:24.0.0'
}
